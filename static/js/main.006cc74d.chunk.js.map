{"version":3,"sources":["logo.svg","Card.js","CardList.js","SearchBox.js","Scroll.js","Button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","type","onChange","placeholder","Scroll","style","overflowY","border","height","children","Button","onClick","background","color","App","onSearchChange","event","console","log","target","value","setState","searchfield","state","fetch","then","res","json","users","FilterMonsters","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8MAAAA,EAAOC,QAAU,IAA0B,kC,uJCa5BC,G,YAXF,SAACC,GAEZ,OACY,yBAAKC,UAAU,kBACb,yBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACxB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCIlBC,EATE,SAACR,GAEjB,OAAO,yBAAKC,UAAU,aACdD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1B,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCG1BQ,G,kBARE,SAACZ,GAEjB,OACY,6BACF,2BAAOa,KAAK,SAASZ,UAAU,SAASa,SAAUd,EAAMc,SAAaC,YAAY,uBCD7EC,EAJD,SAAChB,GAEd,OAAO,yBAAKiB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAmBC,OAAO,UAAWpB,EAAMqB,WCE3EC,EAJF,SAACtB,GAET,OAAO,6BAAK,4BAAQuB,QAASvB,EAAMuB,QAASN,MAAO,CAACO,WAAW,OAAOC,MAAM,UAAhE,eCgDFC,E,YA3Cb,aACC,IAAD,8BACK,+CAYLC,eAAgB,SAACC,GAEbC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CAACC,YAAYN,EAAMG,OAAOC,SAhB5C,EAkBAT,QAAS,WAEPM,QAAQC,IAAI,eAlBT,EAAKK,MAAQ,CACT1B,SAAS,GACTyB,YAAY,IAJrB,E,iFAQC,IAAD,OACEE,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAG,GAAK,OAAG,EAAKP,SAAS,CAACxB,SAAS+B,S,+BAYvC,IAAD,OACQC,EAAiBC,KAAKP,MAAM1B,SAASkC,QAAO,SAAAvC,GAAO,OAAEA,EAAQE,KAAKsC,cAAcC,SAAS,EAAKV,MAAMD,YAAYU,kBACjGF,KAAKP,MAAjB1B,SACP,OACF,yBAAKR,UAAU,OACV,gDACA,8BAAM,kBAAC,EAAD,CAAWa,SAAU4B,KAAKf,iBAAkB,kBAAC,EAAD,CAAQJ,QAASmB,KAAKnB,WACzE,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAUd,SAAUgC,U,GAjCbK,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.006cc74d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport './card.style.css';\r\nconst Card = (props) =>\r\n{\r\n\t return(\r\n              <div className='card-container'>\r\n                <img alt=\"monsters\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n              \t<h2>{props.monster.name}</h2>\r\n              \t<p>{props.monster.email}</p>\r\n              </div>\r\n\t \t)\r\n\r\n}\r\nexport default Card;","import React from 'react';\r\nimport './card-list.style.css';\r\nimport Card from './Card';\r\nconst CardList = (props) =>\r\n{\r\n\treturn <div className='card-list'>\r\n\t       {props.monsters.map(monster=>\r\n\t       \t<Card key={monster.id} monster={monster} />\r\n\t\t)}\r\n          \r\n\t</div>\r\n}\r\nexport default CardList;","import React from 'react';\r\nimport './searchbox.style.css';\r\nconst SearchBox =(props) =>\r\n{\r\n\treturn (\r\n             <div>\r\n\t\t         <input type='search' className='search' onChange={props.onChange}    placeholder='search monsters' />\r\n\t\t     </div>\r\n\t\t     )\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nconst Scroll =(props) =>\r\n{\r\n\treturn(<div style={{overflowY:'scroll',border:'1px solid black', height:'500px'}}>{props.children}</div>)\r\n}\r\nexport default Scroll;","import React from 'react';\r\nconst Button=(props)=>\r\n{\r\n     return(<div><button onClick={props.onClick} style={{background:'blue',color:'black'}}>Click Me!</button></div>)\r\n}\r\nexport default Button;","import React,{Component} from 'react';\nimport CardList from './CardList';\nimport logo from './logo.svg';\nimport './App.css';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport Button from './Button';\nclass App extends Component{\n  constructor()\n  {\n       super();\n       this.state = {\n           monsters:[],\n           searchfield:''\n       }\n  }\n  componentDidMount()\n  {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res =>res.json())\n    .then(users =>this.setState({monsters:users}))\n  }\n  onSearchChange =(event)=>\n  {\n      console.log(event.target.value)\n      this.setState({searchfield:event.target.value})\n  }\n  onClick =() =>\n  {\n    console.log('Clicked Me')\n  }\n  render()\n  {\n    const FilterMonsters = this.state.monsters.filter(monster=>monster.name.toLowerCase().includes(this.state.searchfield.toLowerCase()))\n      const {monsters} = this.state;\n      return (\n    <div className=\"App\">\n         <h1>Monsters-Rolodex</h1>\n         <span><SearchBox onChange={this.onSearchChange} /><Button onClick={this.onClick} /></span>\n        <Scroll>\n           <CardList monsters={FilterMonsters}>\n           </CardList>\n        </Scroll>\n         \n\n    </div>\n  );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}